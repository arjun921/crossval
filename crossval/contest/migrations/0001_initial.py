# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2016-08-24 12:32
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Contest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('tos', models.TextField(default='Do what you want after permission from the hosts of the contest.')),
                ('ground_truth', models.FileField(upload_to='ground_truth/')),
                ('max_submissions_per_day', models.IntegerField(default=50)),
                ('start_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('end_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('published', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tos', models.TextField(default='')),
                ('nick', models.CharField(max_length=50)),
                ('_last_submission_stamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('public_max_score', models.FloatField(default=0.0)),
                ('stamp', models.DateTimeField(auto_now_add=True)),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contest_contract', to='contest.Contest')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_contract', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('csv_file', models.FileField(upload_to='resource/')),
                ('public', models.BooleanField(default=True)),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contest_resource', to='contest.Contest')),
            ],
        ),
        migrations.CreateModel(
            name='ScoreSchemes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='accuracy', max_length=50)),
                ('lower_is_better', models.BooleanField(default=True, help_text='Is a lower score better')),
            ],
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_file', models.FileField(upload_to='submission/csv/')),
                ('code_file', models.FileField(upload_to='submission/code/')),
                ('comment', models.TextField(default='')),
                ('score', models.FloatField(default=None, null=True)),
                ('valid', models.BooleanField(default=False)),
                ('stamp', models.DateTimeField(auto_now_add=True)),
                ('contract', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contract_submission', to='contest.Contract')),
            ],
        ),
        migrations.AddField(
            model_name='contest',
            name='scoring',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='score_schemes_contest', to='contest.ScoreSchemes'),
        ),
        migrations.AlterUniqueTogether(
            name='contract',
            unique_together=set([('user', 'contest')]),
        ),
    ]
